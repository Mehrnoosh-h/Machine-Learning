{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9daaa7e9",
   "metadata": {},
   "source": [
    "Mehrnoosh Hasanzade, Chicago\n",
    "\n",
    "Please review my thoughts and steps in each Markdown block and the  # comments before each code block."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "1fc92b03",
   "metadata": {},
   "outputs": [],
   "source": [
    "#loading the lobraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from datetime import datetime\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "fbba26e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Loading the data\n",
    "df = pd.read_csv('dataset.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1d5f4e9",
   "metadata": {},
   "source": [
    "* Data Cleaning Process:\n",
    "* 1. standardize the dates\n",
    "* 2. check for NA \n",
    "* 3. check for outliers and take care of them\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "5feb059e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#standardize the dates\n",
    "df['Policy Start Date'] = pd.to_datetime(df['Policy Start Date'])\n",
    "df['Policy End Date'] = pd.to_datetime(df['Policy End Date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "00b63563",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check for NA\n",
    "df['Policy Start Date'].isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "8ef14abf",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32996"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Number of policies that did not end yet\n",
    "df['Policy End Date'].isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "ec2fd73b",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2021.0    17551\n",
       "2020.0    11653\n",
       "2019.0     3212\n",
       "Name: Policy End Date, dtype: int64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check for outliers in 'Policy End Date' and also I checked there was not any end date after 2021-11-01 \n",
    "df['Policy End Date'].dt.year.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8114a1d8",
   "metadata": {},
   "source": [
    "* check for outliers in 'Policy Start Date' and there is an outlier since the data was pulled from the table as of Nov/2021\n",
    "* so there should not be a date after that. 2052 is an outlier that shows incorrect data and should be remove here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "d1b357f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2021    27998\n",
       "2020    22223\n",
       "2019    15190\n",
       "2051        1\n",
       "Name: Policy Start Date, dtype: int64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Policy Start Date'].dt.year.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "3471a12d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#delete the outlier\n",
    "df = df[df['Policy Start Date'].dt.year <= 2021]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "e36b865c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Policy Start Date</th>\n",
       "      <th>Policy End Date</th>\n",
       "      <th>Revenue</th>\n",
       "      <th>Feature 1</th>\n",
       "      <th>Feature 2</th>\n",
       "      <th>Feature 3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2457</td>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>2021-06-01</td>\n",
       "      <td>156.710314</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.649264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2458</td>\n",
       "      <td>2021-07-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>190.236838</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.119590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2459</td>\n",
       "      <td>2020-01-01</td>\n",
       "      <td>2021-06-01</td>\n",
       "      <td>183.123384</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.749034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2460</td>\n",
       "      <td>2021-09-01</td>\n",
       "      <td>2021-09-01</td>\n",
       "      <td>24.626305</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.498292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2461</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>30.184129</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.865428</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     ID Policy Start Date Policy End Date     Revenue  Feature 1  Feature 2  \\\n",
       "0  2457        2020-10-01      2021-06-01  156.710314          1        0.0   \n",
       "1  2458        2021-07-01             NaT  190.236838          1        0.0   \n",
       "2  2459        2020-01-01      2021-06-01  183.123384          0        0.0   \n",
       "3  2460        2021-09-01      2021-09-01   24.626305          0        1.0   \n",
       "4  2461        2021-10-01      2021-10-01   30.184129          1        1.0   \n",
       "\n",
       "   Feature 3  \n",
       "0   0.649264  \n",
       "1   0.119590  \n",
       "2   0.749034  \n",
       "3   0.498292  \n",
       "4   0.865428  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21d2d8f7",
   "metadata": {},
   "source": [
    "#1 #########################################################################################################################"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e37e6beb",
   "metadata": {},
   "source": [
    "* Calculate total revenue for:\n",
    "* a) All policies that started in 2021 policies, regardless of their end date.\n",
    "* b) Each Policy Start Date in 2021.\n",
    "\n",
    "* Answer:\n",
    "* Step 1: Filter policies that started in 2021\n",
    "* Step 2: Calculate total revenue for policies that started in 2021\n",
    "* Step 3: Calculate total revenue for each unique policy start date in 2021\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "00ca6d4b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total revenue for policies that started in 2021: $ 1005522323.9071742\n",
      "\n",
      "Total revenue for each unique policy start date in 2021:\n",
      "   Policy Start Date       Revenue\n",
      "0         2021-01-01  2.206314e+05\n",
      "1         2021-02-01  2.049054e+05\n",
      "2         2021-03-01  2.104736e+05\n",
      "3         2021-04-01  2.067009e+05\n",
      "4         2021-05-01  5.140666e+04\n",
      "5         2021-06-01  2.864442e+04\n",
      "6         2021-07-01  1.618060e+06\n",
      "7         2021-08-01  1.002393e+09\n",
      "8         2021-09-01  2.131363e+05\n",
      "9         2021-10-01  2.143703e+05\n",
      "10        2021-11-01  1.609616e+05\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Step 1: Filter policies that started in 2021\n",
    "df['Policy Start Date'] = pd.to_datetime(df['Policy Start Date'])  # Convert the date column to datetime\n",
    "policies_started_in_2021 = df[df['Policy Start Date'].dt.year == 2021]\n",
    "\n",
    "# Step 2: Calculate total revenue for policies that started in 2021\n",
    "total_revenue_2021 = policies_started_in_2021['Revenue'].sum()\n",
    "\n",
    "# Step 3: Calculate total revenue for each unique policy start date in 2021\n",
    "revenue_by_start_date_2021 = policies_started_in_2021.groupby('Policy Start Date')['Revenue'].sum().reset_index()\n",
    "\n",
    "# Display the results\n",
    "print(\"Total revenue for policies that started in 2021: $\", total_revenue_2021)\n",
    "print(\"\\nTotal revenue for each unique policy start date in 2021:\")\n",
    "print(revenue_by_start_date_2021)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "860f8fc9",
   "metadata": {},
   "source": [
    "#2 ################################################################################################################"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a862bf5",
   "metadata": {},
   "source": [
    "* 2. Calculate the First Year Renewal percentage of all policies that started on July 1, 2020\n",
    "* Step 1: Filter policies that started on July 1, 2020\n",
    "* Step 2: Count the total number of policies that started on July 1, 2020\n",
    "* Step 3: Count the total number of policies that renewed\n",
    "* Step 4: Calculate the First Year Renewal percentage\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "099e7a21",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total policies that started on July 1, 2020: 9096\n",
      "Total policies that renewed: 4818\n",
      "First Year Renewal Percentage: 52.97%\n"
     ]
    }
   ],
   "source": [
    "# Step 1: Filter policies that started on July 1, 2020\n",
    "\n",
    "policies_started_on_july_1_2020 = df[df['Policy Start Date'] == '2020-07-01']\n",
    "\n",
    "# Step 2: Count the total number of policies that started on July 1, 2020\n",
    "total_policies_started_on_july_1_2020 = len(policies_started_on_july_1_2020)\n",
    "\n",
    "# Step 3: Count the total number of policies that renewed\n",
    "ended_policies = policies_started_on_july_1_2020[df['Policy End Date'] >= '2021-07-01'].shape[0]\n",
    "continued_policies = policies_started_on_july_1_2020[df['Policy End Date'].isna()].shape[0]\n",
    "# print(continued_policies)\n",
    "renewed_policies = ended_policies + continued_policies\n",
    "# print(renewed_policies)\n",
    "\n",
    "\n",
    "# Step 4: Calculate the First Year Renewal percentage\n",
    "first_year_renewal_percentage = (renewed_policies / total_policies_started_on_july_1_2020) * 100\n",
    "# Display the results\n",
    "print(\"Total policies that started on July 1, 2020:\", total_policies_started_on_july_1_2020)\n",
    "print(\"Total policies that renewed:\", renewed_policies)\n",
    "print(\"First Year Renewal Percentage: {:.2f}%\".format(first_year_renewal_percentage))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fddcb811",
   "metadata": {},
   "source": [
    "#3 ################################################################################################################"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4c7a1d3",
   "metadata": {},
   "source": [
    "* A stakeholder has a theory of a year-over-year increase in average policy duration. Can we find data-based evidence that  backs this claim?\n",
    "* To calculate the average policy duration, we would need data for policies that started in a given year and the corresponding end dates. However, we lack end dates for all policies. Additionally, policies that began in 2019, for example, appear to have longer durations, but this may be influenced by the fact that our data only goes up to November 2021. Conversely, policies that started in 2021 have data for only a few months.\n",
    "\n",
    "* One approach to explore this is to consider specific time periods within each year and calculate the average duration for those periods. However, this method requires us to make assumptions about the end dates of policies with null end dates, such as considering December 1, 2019, for policies that have not ended. This approach, however, may not provide an accurate answer. Therefore, it's safe to say that, based on the current dataset, we cannot support the stakeholder's theory. Moreover, we cannot even compare the total number of policies for each year, as we lack data for December 2021.\n",
    "\n",
    "* I have included a column for date differences for all policies and calculated the average days of duration for each month. However, as previously mentioned, this result cannot adequately support the theory, given the unequal data availability for different years (three years of data for 2019 but less than a year for 2021).\n",
    "\n",
    "* Furthermore, I have computed the annual average duration for policies that both started and ended within the same year, but the results do not reveal any discernible pattern.\n",
    "\n",
    "* We can also compare the policies on specific months or quarters in each year.. maybe only the numbers of new policies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "29956e09",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Policy Start Date</th>\n",
       "      <th>Policy End Date</th>\n",
       "      <th>Revenue</th>\n",
       "      <th>Feature 1</th>\n",
       "      <th>Feature 2</th>\n",
       "      <th>Feature 3</th>\n",
       "      <th>Date Difference (days)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2457</td>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>2021-06-01</td>\n",
       "      <td>1.567103e+02</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.649264</td>\n",
       "      <td>243.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2458</td>\n",
       "      <td>2021-07-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>1.902368e+02</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.119590</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2459</td>\n",
       "      <td>2020-01-01</td>\n",
       "      <td>2021-06-01</td>\n",
       "      <td>1.831234e+02</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.749034</td>\n",
       "      <td>517.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2460</td>\n",
       "      <td>2021-09-01</td>\n",
       "      <td>2021-09-01</td>\n",
       "      <td>2.462631e+01</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.498292</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2461</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>3.018413e+01</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.865428</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65406</th>\n",
       "      <td>67446</td>\n",
       "      <td>2019-07-01</td>\n",
       "      <td>2021-08-01</td>\n",
       "      <td>2.881506e+02</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.888583</td>\n",
       "      <td>762.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65407</th>\n",
       "      <td>67447</td>\n",
       "      <td>2021-11-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>1.012207e+02</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.958398</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65408</th>\n",
       "      <td>67448</td>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>1.492004e+02</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.292904</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65409</th>\n",
       "      <td>67449</td>\n",
       "      <td>2020-07-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>1.649433e+02</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.182917</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65411</th>\n",
       "      <td>67583</td>\n",
       "      <td>2021-08-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>1.002167e+09</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.429175</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>65411 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          ID Policy Start Date Policy End Date       Revenue  Feature 1  \\\n",
       "0       2457        2020-10-01      2021-06-01  1.567103e+02          1   \n",
       "1       2458        2021-07-01             NaT  1.902368e+02          1   \n",
       "2       2459        2020-01-01      2021-06-01  1.831234e+02          0   \n",
       "3       2460        2021-09-01      2021-09-01  2.462631e+01          0   \n",
       "4       2461        2021-10-01      2021-10-01  3.018413e+01          1   \n",
       "...      ...               ...             ...           ...        ...   \n",
       "65406  67446        2019-07-01      2021-08-01  2.881506e+02          1   \n",
       "65407  67447        2021-11-01             NaT  1.012207e+02          0   \n",
       "65408  67448        2020-10-01             NaT  1.492004e+02          0   \n",
       "65409  67449        2020-07-01             NaT  1.649433e+02          0   \n",
       "65411  67583        2021-08-01             NaT  1.002167e+09          0   \n",
       "\n",
       "       Feature 2  Feature 3  Date Difference (days)  \n",
       "0            0.0   0.649264                   243.0  \n",
       "1            0.0   0.119590                     NaN  \n",
       "2            0.0   0.749034                   517.0  \n",
       "3            1.0   0.498292                     0.0  \n",
       "4            1.0   0.865428                     0.0  \n",
       "...          ...        ...                     ...  \n",
       "65406        1.0   0.888583                   762.0  \n",
       "65407        1.0   0.958398                     NaN  \n",
       "65408        0.0   0.292904                     NaN  \n",
       "65409        0.0   0.182917                     NaN  \n",
       "65411        1.0   0.429175                     NaN  \n",
       "\n",
       "[65411 rows x 8 columns]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# Convert date columns to datetime objects\n",
    "df['Policy Start Date'] = pd.to_datetime(df['Policy Start Date'], format='%m/%d/%Y')\n",
    "df['Policy End Date'] = pd.to_datetime(df['Policy End Date'], format='%m/%d/%Y')\n",
    "\n",
    "# Calculate the difference in days\n",
    "df['Date Difference (days)'] = (df['Policy End Date'] - df['Policy Start Date']).dt.days\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "990d2a10",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Policy Start Date\n",
      "2019    300.420562\n",
      "2020    189.449259\n",
      "2021     63.288941\n",
      "Name: Date Difference (days), dtype: float64\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Group by the year of 'Policy Start Date' and calculate the average 'Date Difference (days)'\n",
    "average_by_year = df.groupby(df['Policy Start Date'].dt.year)['Date Difference (days)'].mean()\n",
    "\n",
    "print(average_by_year)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "823c7c16",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Year  Average Policy Duration (days)\n",
      "0  2019                       41.979141\n",
      "1  2020                       75.657161\n",
      "2  2021                       63.288941\n"
     ]
    }
   ],
   "source": [
    "# Filter the DataFrame for policies that start and end in the same year\n",
    "df_same_year = df[df['Policy Start Date'].dt.year == df['Policy End Date'].dt.year]\n",
    "\n",
    "# Calculate the policy duration in days for each policy\n",
    "df_same_year['Policy Duration'] = (df_same_year['Policy End Date'] - df_same_year['Policy Start Date']).dt.days\n",
    "\n",
    "# Group by the start year and calculate the average duration for each year\n",
    "average_duration_by_year = df_same_year.groupby(df_same_year['Policy Start Date'].dt.year)['Policy Duration'].mean().reset_index()\n",
    "\n",
    "# Rename columns for clarity\n",
    "average_duration_by_year.columns = ['Year', 'Average Policy Duration (days)']\n",
    "\n",
    "print(average_duration_by_year)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f5b9812",
   "metadata": {},
   "source": [
    "#4 ########################################################################################################################"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05730570",
   "metadata": {},
   "source": [
    "* A stakeholder noticed there are transactions that interfere with their reports, these are referred to as “Paired Transactions”. Given a subset of data in the paired_transactions.xls, write logic to remove such paired transactions.\n",
    "\n",
    "*I followed these steps:\n",
    "* step 1: Load data and Cleaning\n",
    "* step 2: Find rows where the commission is negative  and Create a DataFrame to hold rows to be deleted\n",
    "* step: Iterate over the negative commission rows to find their corresponding positive commission rows\n",
    "* step 4: Append the negative commission rows to the rows_to_delete DataFrame\n",
    "* step 5:Drop the rows from the original DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "c3bab5f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pip install xlrd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "029973d4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Payment date</th>\n",
       "      <th>Commission</th>\n",
       "      <th>channel</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2021-01-01</td>\n",
       "      <td>100</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2021-01-01</td>\n",
       "      <td>-50</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>2021-01-01</td>\n",
       "      <td>25</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>2021-01-01</td>\n",
       "      <td>50</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>2021-01-01</td>\n",
       "      <td>100</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>2021-02-01</td>\n",
       "      <td>100</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2</td>\n",
       "      <td>2021-02-01</td>\n",
       "      <td>100</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2</td>\n",
       "      <td>2021-02-01</td>\n",
       "      <td>100</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3</td>\n",
       "      <td>2021-03-01</td>\n",
       "      <td>200</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID Payment date  Commission channel\n",
       "0   1   2021-01-01         100       A\n",
       "1   1   2021-01-01         -50       A\n",
       "2   1   2021-01-01          25       A\n",
       "3   1   2021-01-01          50       A\n",
       "4   1   2021-01-01         100       A\n",
       "5   1   2021-02-01         100       A\n",
       "6   2   2021-02-01         100       B\n",
       "7   2   2021-02-01         100       B\n",
       "8   3   2021-03-01         200       B"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the data and change the column names to lowercase for ease of cleaning and analysis\n",
    "data = pd.read_excel('paired_transactions.xls')\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "8a2865c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.columns = data.columns.str.lower()\n",
    "# Convert 'Payment Date' to datetime \n",
    "data['payment date'] = pd.to_datetime(data['payment date'])\n",
    "# data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "dfc62faa",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data after deleting both negative and corresponding positive commission rows:\n",
      "   id payment date  commission channel\n",
      "0   1   2021-01-01         100       A\n",
      "1   1   2021-01-01          25       A\n",
      "2   1   2021-01-01         100       A\n",
      "3   1   2021-02-01         100       A\n",
      "4   2   2021-02-01         100       B\n",
      "5   2   2021-02-01         100       B\n",
      "6   3   2021-03-01         200       B\n"
     ]
    }
   ],
   "source": [
    " # step 2: Find rows where the commission is negative\n",
    "negative_commissions = data[data['commission'] < 0]\n",
    "\n",
    "# Create a DataFrame to hold rows to be deleted\n",
    "rows_to_delete = pd.DataFrame()\n",
    "\n",
    "# step 3: Iterate over the negative commission rows to find their corresponding positive commission rows\n",
    "for index, row in negative_commissions.iterrows():\n",
    "    # Find the matching row with the absolute commission value\n",
    "    matching_rows = data[\n",
    "        (data['id'] == row['id']) &\n",
    "        (data['payment date'] == row['payment date']) &\n",
    "        (data['channel'] == row['channel']) &\n",
    "        (data['commission'] == -row['commission'])\n",
    "    ]\n",
    "    \n",
    "    # Append the matching rows to the rows_to_delete DataFrame\n",
    "    rows_to_delete = rows_to_delete.append(matching_rows)\n",
    "\n",
    "# step 4: Append the negative commission rows to the rows_to_delete DataFrame\n",
    "rows_to_delete = rows_to_delete.append(negative_commissions)\n",
    "\n",
    "# step 5:Drop the rows from the original DataFrame\n",
    "data_cleaned = data.drop(rows_to_delete.index).reset_index(drop=True)\n",
    "\n",
    "print(\"Data after deleting both negative and corresponding positive commission rows:\")\n",
    "print(data_cleaned)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ab7cce1",
   "metadata": {},
   "source": [
    "Thanks for giving me this opportunity!\n",
    "Mehrnoosh"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
